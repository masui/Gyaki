// Generated by CoffeeScript 1.9.0
var app, browserHeight, browserWidth, initCallbacks, initElements, initParams, resize;

app = {};

$(function() {
  initElements();
  initParams();
  initCallbacks();
  return resize();
});

browserWidth = function() {
  if (window.innerWidth) {
    return window.innerWidth;
  }
  if (document.body) {
    return document.body.clientWidth;
  }
  return 0;
};

browserHeight = function() {
  if (window.innerHeight) {
    return window.innerHeight;
  }
  if (document.body) {
    return document.body.clientHeight;
  }
  return 0;
};

resize = function() {
  var buttonHeight, buttonWidth, canvasSize, gap, i, img, orientation, _i, _j, _ref, _results, _results1;
  window.devicePixelRatio = 1.0;
  app.width = browserWidth();
  app.height = browserHeight();
  canvasSize = app.height < app.width ? app.height : app.width;
  if (gyazoImageID) {
    img = new Image();
    img.src = "/gyazodata/" + gyazoImageID;
    img.onload = function() {
      return app.context.drawImage(img, 0, 0);
    };
  }
  orientation = window.orientation ? window.orientation === '0' || window.orientation === '180' ? 'portrait' : ((_ref = [app.height, app.width], app.width = _ref[0], app.height = _ref[1], _ref), 'landscape') : app.width > app.height ? 'landscape' : 'portrait';
  app.canvas.attr('width', canvasSize).attr('height', canvasSize);
  app.context.fillStyle = '#fff';
  app.context.fillRect(0, 0, app.width, app.height);
  if (orientation === 'portrait') {
    buttonWidth = app.width / 10;
    buttonHeight = buttonWidth;
    gap = (app.width - (buttonWidth * 7)) / 11;
    app.uploadButton.css('top', app.width + gap).css('left', gap).css('width', buttonWidth).css('height', buttonHeight).css('visibility', 'visible');
    _results = [];
    for (i = _i = 0; _i < 3; i = ++_i) {
      app.lineButtons[i].css('top', app.width + gap).css('left', gap * 3 + buttonWidth + (buttonWidth + gap) * i).css('width', buttonWidth).css('height', buttonWidth).css('visibility', 'visible');
      _results.push(app.colorButtons[i].css('top', app.width + gap).css('left', gap * 7 + buttonWidth * 4 + (buttonWidth + gap) * i).css('width', buttonWidth).css('height', buttonWidth).css('visibility', 'visible'));
    }
    return _results;
  } else {
    buttonHeight = app.height / 10;
    buttonWidth = buttonHeight;
    gap = (app.height - (buttonHeight * 7)) / 11;
    app.uploadButton.css('top', gap).css('left', canvasSize + gap).css('width', buttonWidth).css('height', buttonHeight).css('visibility', 'visible');
    _results1 = [];
    for (i = _j = 0; _j < 3; i = ++_j) {
      app.lineButtons[i].css('top', gap * 3 + buttonWidth + (buttonWidth + gap) * i).css('left', canvasSize + gap).css('width', buttonWidth).css('height', buttonHeight).css('visibility', 'visible');
      _results1.push(app.colorButtons[i].css('top', gap * 7 + buttonWidth * 4 + (buttonWidth + gap) * i).css('left', canvasSize + gap).css('width', buttonWidth).css('height', buttonHeight).css('visibility', 'visible'));
    }
    return _results1;
  }
};

initElements = function() {
  var button, i, _i, _j, _len, _len1, _ref, _ref1, _results;
  app.canvas = $('<canvas>');
  $('body').append(app.canvas);
  app.uploadButton = $('<input type="button">').css('position', 'absolute').css('visibility', 'hidden').attr('value', 'UP');
  $('body').append(app.uploadButton);
  app.lineButtons = (function() {
    var _i, _results;
    _results = [];
    for (i = _i = 0; _i < 3; i = ++_i) {
      _results.push($('<img>').css('position', 'absolute').css('visibility', 'hidden').attr('src', "/images/line" + (i + 1) + ".png"));
    }
    return _results;
  })();
  _ref = app.lineButtons;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    button = _ref[_i];
    $('body').append(button);
  }
  app.colorButtons = (function() {
    var _j, _results;
    _results = [];
    for (i = _j = 0; _j <= 3; i = ++_j) {
      _results.push($('<img>').css('position', 'absolute').css('visibility', 'hidden').attr('src', "images/color" + (i + 1) + ".png"));
    }
    return _results;
  })();
  _ref1 = app.colorButtons;
  _results = [];
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    button = _ref1[_j];
    _results.push($('body').append(button));
  }
  return _results;
};

initParams = function() {
  window.devicePixelRatio = 1.0;
  app.canvasX = app.canvas.offset()["left"];
  app.canvasY = app.canvas.offset()["top"];
  app.crd = {
    cur: [0, 0],
    pre: [0, 0]
  };
  app.drawing = false;
  app.lineWidth = 15;
  app.strokeStyle = "#000";
  app.context = app.canvas[0].getContext('2d');
  app.lineButtons[0].on('click', function(e) {
    return app.lineWidth = 3;
  });
  app.lineButtons[1].on('click', function(e) {
    return app.lineWidth = 15;
  });
  app.lineButtons[2].on('click', function(e) {
    return app.lineWidth = 30;
  });
  app.colorButtons[0].on('click', function(e) {
    return app.strokeStyle = 'rgb(255, 255, 255)';
  });
  app.colorButtons[1].on('click', function(e) {
    return app.strokeStyle = 'rgb(128, 128, 128)';
  });
  return app.colorButtons[2].on('click', function(e) {
    return app.strokeStyle = 'rgb(0, 0, 0)';
  });
};

initCallbacks = function() {
  app.canvas.on('touchmove mousemove', function(e) {
    var x, y, _ref, _ref1;
    e.preventDefault();
    _ref = 'touchmove' === e.type ? [e.originalEvent.changedTouches[0].pageX, e.originalEvent.changedTouches[0].pageY] : [e.pageX, e.pageY], x = _ref[0], y = _ref[1];
    _ref1 = [x - app.canvasX, y - app.canvasY], x = _ref1[0], y = _ref1[1];
    if (x === app.width / 2 && y === app.width / 2) {
      return;
    }
    if (app.drawing) {
      app.context.lineJoin = "round";
      app.context.lineCap = "round";
      app.context.strokeStyle = app.strokeStyle;
      app.context.lineWidth = app.lineWidth;
      app.context.beginPath();
      app.context.moveTo(app.crd.pre[0], app.crd.pre[1]);
      app.crd.cur = [x, y];
      app.context.lineTo(app.crd.cur[0], app.crd.cur[1]);
      app.crd.pre = app.crd.cur;
      app.context.stroke();
      return app.context.closePath();
    }
  });
  app.canvas.on('touchstart mousedown', function(e) {
    var x, y, _ref;
    e.preventDefault();
    _ref = 'touchstart' === e.type ? [e.originalEvent.changedTouches[0].pageX, e.originalEvent.changedTouches[0].pageY] : [e.pageX, e.pageY], x = _ref[0], y = _ref[1];
    app.crd.pre = [x - app.canvasX, y - app.canvasY];
    return app.drawing = true;
  });
  app.canvas.on('touchend mouseup', function(e) {
    e.preventDefault();
    return app.drawing = false;
  });
  app.uploadButton.on('click', function(e) {
    var imagedata;
    imagedata = app.canvas[0].toDataURL();
    return $.ajax({
      type: 'POST',
      url: '/upload',
      data: {
        data: imagedata,
        id: gyazoUserID
      },
      success: function(data, textStatus, jqXHR) {
        return location.href = data;
      }
    });
  });
  return $(window).on('resize', resize);
};
